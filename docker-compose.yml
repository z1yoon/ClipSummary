version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app
      - /app/node_modules
    restart: always

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d
    depends_on:
      - frontend
      - backend
    restart: always

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/app
      - backend-uploads:/app/uploads
      - backend-cache:/app/cache
      - ./models:/app/.cache/huggingface
    environment:
      - PYTHONUNBUFFERED=1
      - TRANSFORMERS_CACHE=/app/.cache/huggingface
      - HF_HOME=/app/.cache/huggingface
      - CUDA_VISIBLE_DEVICES=0
      - TORCH_USE_CUDA_DSA=1
    env_file:
      - .env
    depends_on:
      - redis
      - postgres
    restart: always
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu, compute, utility]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:alpine
    volumes:
      - redis-data:/data

  postgres:
    image: postgres:13
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-clipsummary}
      - POSTGRES_USER=${POSTGRES_USER:-clipsummary}
      - POSTGRES_DB=${POSTGRES_DB:-clipsummary}
    ports:
      - "5432:5432"
    restart: always

volumes:
  redis-data:
  postgres-data:
  backend-uploads:
  backend-cache: