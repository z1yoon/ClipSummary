name: Build and Deploy

on:
  push:
    branches: [ dev, main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ secrets.DOCKER_USERNAME }}/clipsummary-backend
            ${{ secrets.DOCKER_USERNAME }}/clipsummary-frontend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/clipsummary-backend:${{ github.ref_name }}
            ${{ secrets.DOCKER_USERNAME }}/clipsummary-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/clipsummary-frontend:${{ github.ref_name }}
            ${{ secrets.DOCKER_USERNAME }}/clipsummary-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Deploy to staging
        env:
          STAGING_HOST: ${{ secrets.STAGING_HOST }}
          STAGING_USER: ${{ secrets.STAGING_USER }}
          STAGING_KEY: ${{ secrets.STAGING_SSH_KEY }}
        run: |
          # Install SSH key
          mkdir -p ~/.ssh
          echo "$STAGING_KEY" > ~/.ssh/staging_key
          chmod 600 ~/.ssh/staging_key
          
          # Deploy to staging server
          ssh -i ~/.ssh/staging_key -o StrictHostKeyChecking=no $STAGING_USER@$STAGING_HOST << 'EOF'
            cd /opt/clipsummary
            git pull origin dev
            docker-compose -f docker-compose.staging.yml pull
            docker-compose -f docker-compose.staging.yml up -d
            docker system prune -f
          EOF
      
      - name: Run smoke tests on staging
        env:
          STAGING_URL: ${{ secrets.STAGING_URL }}
        run: |
          # Wait for services to start
          sleep 30
          
          # Basic health check
          curl -f $STAGING_URL/health || exit 1
          echo "Staging deployment successful!"

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Deploy to production
        env:
          PROD_HOST: ${{ secrets.PROD_HOST }}
          PROD_USER: ${{ secrets.PROD_USER }}
          PROD_KEY: ${{ secrets.PROD_SSH_KEY }}
        run: |
          # Install SSH key
          mkdir -p ~/.ssh
          echo "$PROD_KEY" > ~/.ssh/prod_key
          chmod 600 ~/.ssh/prod_key
          
          # Deploy to production server
          ssh -i ~/.ssh/prod_key -o StrictHostKeyChecking=no $PROD_USER@$PROD_HOST << 'EOF'
            cd /opt/clipsummary
            git pull origin main
            docker-compose -f docker-compose.prod.yml pull
            docker-compose -f docker-compose.prod.yml up -d
            docker system prune -f
          EOF
      
      - name: Run smoke tests on production
        env:
          PROD_URL: ${{ secrets.PROD_URL }}
        run: |
          # Wait for services to start
          sleep 30
          
          # Basic health check
          curl -f $PROD_URL/health || exit 1
          echo "Production deployment successful!"
      
      - name: Create GitHub release
        if: github.ref == 'refs/heads/main'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            Automated release from main branch
            Commit: ${{ github.sha }}
          draft: false
          prerelease: false