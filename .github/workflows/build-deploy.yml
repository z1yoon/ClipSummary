name: Build and Deploy

on:
  push:
    branches: [ dev, main, enhancement2 ]
  workflow_dispatch: # Allow manual triggering

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Tailscale
        uses: tailscale/github-action@v2
        with:
          authkey: ${{ secrets.TAILSCALE_KEY }}
          hostname: github-actions-${{ github.run_id }}
      
      - name: Debug network connectivity
        run: |
          echo "=== Tailscale Status ==="
          tailscale status
          echo ""
          echo "=== Testing connectivity to school network ==="
          ping -c 3 10.241.150.21 || echo "Ping to school IP failed"
          echo ""
          echo "=== Testing SSH port on school network ==="
          nc -zv 10.241.150.21 22 || echo "SSH port test failed on school IP"
          echo ""
          echo "=== Testing connectivity to Tailscale IP (for comparison) ==="
          ping -c 3 ${{ secrets.DEPLOY_HOST }} || echo "Ping to Tailscale IP failed"
      
      - name: SSH to server and deploy
        env:
          DEPLOY_HOST: "10.241.150.21"  # Use school network IP directly
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_SSH_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
          DEPLOY_DIR: ${{ secrets.DEPLOY_DIR }}
        run: |
          echo "=== Setting up SSH for school network ==="
          
          # Setup SSH key with proper formatting
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Handle SSH key - remove any carriage returns and ensure proper format
          echo "$DEPLOY_SSH_KEY" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Verify SSH key format
          echo "=== SSH Key Info ==="
          head -1 ~/.ssh/id_rsa
          tail -1 ~/.ssh/id_rsa
          
          # Create SSH config for school network
          cat > ~/.ssh/config << 'SSHCONFIG'
          Host 10.241.150.21
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
            PasswordAuthentication no
            PubkeyAuthentication yes
            ConnectTimeout 30
            ServerAliveInterval 60
            ServerAliveCountMax 3
          SSHCONFIG
          
          chmod 600 ~/.ssh/config
          
          echo "=== Testing SSH connection to school network ==="
          ssh -vvv -i ~/.ssh/id_rsa -o ConnectTimeout=30 $DEPLOY_USER@10.241.150.21 "echo 'SSH connection successful'; whoami; pwd; uname -a" || {
            echo "SSH connection failed. Checking common issues..."
            echo "1. Verifying target host is reachable:"
            ping -c 3 10.241.150.21 || echo "Host unreachable"
            echo "2. Checking SSH service:"
            nc -zv 10.241.150.21 22 || echo "SSH port not responding"
            echo "3. SSH key fingerprint:"
            ssh-keygen -lf ~/.ssh/id_rsa
            exit 1
          }
          
          echo "=== Starting deployment ==="
          # SSH to server and deploy via school network
          ssh -i ~/.ssh/id_rsa $DEPLOY_USER@10.241.150.21 << 'EOF'
            set -e
            echo "Connected successfully to school network! Starting deployment..."
            
            # Show current environment
            echo "Current user: $(whoami)"
            echo "Current directory: $(pwd)"
            echo "Home directory: $HOME"
            
            # Navigate to deployment directory
            echo "Navigating to deployment directory: ${{ secrets.DEPLOY_DIR }}"
            cd "${{ secrets.DEPLOY_DIR }}" || {
              echo "Error: Cannot access deployment directory ${{ secrets.DEPLOY_DIR }}"
              echo "Available directories in current location:"
              ls -la
              exit 1
            }
            
            echo "Current git status:"
            git status || echo "Not a git repository or git not available"
            
            # Pull latest changes
            echo "Fetching latest changes..."
            git fetch origin
            git checkout ${{ github.ref_name }}
            git pull origin ${{ github.ref_name }}
            
            # Stop existing containers
            echo "Stopping existing containers..."
            docker-compose down || true
            
            # Build and deploy with docker-compose
            echo "Building and starting containers..."
            docker-compose build --no-cache
            docker-compose up -d
            
            # Wait for services to start
            echo "Waiting for services to start..."
            sleep 30
            
            # Check if services are running
            echo "=== Container Status ==="
            docker-compose ps
            
            # Show recent logs for debugging
            echo "=== Recent logs (last 30 lines) ==="
            docker-compose logs --tail=30
            
            echo "Deployment completed successfully!"
          EOF