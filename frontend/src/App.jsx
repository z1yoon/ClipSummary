acimport { useState, useRef } from 'react';
import SearchBar from './components/SearchBar';
import FileUpload from './components/FileUpload';
import VideoPlayer from './components/VideoPlayer';
import SubtitlePanel from './components/SubtitlePanel';
import SummaryDisplay from './components/SummaryDisplay';
import ExportButton from './components/ExportButton';

function App() {
  const [videoData, setVideoData] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [currentLanguage, setCurrentLanguage] = useState('en');
  const [availableLanguages, setAvailableLanguages] = useState(['en']);
  const fileInputRef = useRef(null);

  const handleVideoProcessed = (data) => {
    setVideoData(data);
    setIsLoading(false);

    const languages = ['en'];
    if (data?.translations) {
      Object.keys(data.translations).forEach((lang) => {
        if (!languages.includes(lang)) {
          languages.push(lang);
        }
      });
    }
    setAvailableLanguages(languages);
  };

  const handleLanguageChange = (lang) => {
    setCurrentLanguage(lang);
  };

  const handleVideoUpload = (file) => {
    setIsLoading(true);

    console.log('Processing video file:', file.name);

    setTimeout(() => {
      const mockData = {
        title: 'Uploaded Video',
        url: URL.createObjectURL(file),
        transcript: {
          segments: [
            { start: 0, end: 5, text: 'This is a sample transcript segment.' },
            { start: 5, end: 10, text: 'You would get real transcripts from your backend API.' },
          ],
        },
        summary: {
          en: 'This is a sample summary of the video content. In a real application, this would be generated by an AI model.',
        },
        translations: {
          es: {
            transcript: [
              { start: 0, end: 5, text: 'Este es un segmento de transcripción de muestra.' },
              { start: 5, end: 10, text: 'Obtendrías transcripciones reales de tu API de backend.' },
            ],
            summary: 'Esta es una muestra de resumen del contenido del video. En una aplicación real, esto sería generado por un modelo de IA.',
          },
        },
      };

      handleVideoProcessed(mockData);
    }, 2000);
  };

  const handleVideoURL = (url) => {
    setIsLoading(true);

    console.log('Processing video URL:', url);

    setTimeout(() => {
      const mockData = {
        title: 'YouTube Video',
        url: url,
        transcript: {
          segments: [
            { start: 0, end: 5, text: 'This is a sample transcript segment from a URL video.' },
            { start: 5, end: 10, text: 'You would get real transcripts from your backend API.' },
          ],
        },
        summary: {
          en: 'This is a sample summary of the video content. In a real application, this would be generated by an AI model.',
        },
        translations: {
          es: {
            transcript: [
              { start: 0, end: 5, text: 'Este es un segmento de transcripción de muestra de un video URL.' },
              { start: 5, end: 10, text: 'Obtendrías transcripciones reales de tu API de backend.' },
            ],
            summary: 'Esta es una muestra de resumen del contenido del video. En una aplicación real, esto sería generado por un modelo de IA.',
          },
        },
      };

      handleVideoProcessed(mockData);
    }, 2000);
  };

  return (
    <div className="bg-bg-dark min-h-screen text-white">
      <header className="container mx-auto p-4 sm:p-6 md:p-8">
        <h1 className="text-2xl sm:text-3xl md:text-4xl font-bold text-center">
          <span className="gradient-text">Clip</span>Summary
        </h1>
        <p className="text-text-light opacity-75 text-sm sm:text-base text-center mt-2 max-w-md mx-auto">
          Transcribe, summarize, and translate video content with AI
        </p>
      </header>

      <main className="container mx-auto p-4 sm:p-6 pb-20">
        {!videoData ? (
          <div className="max-w-3xl mx-auto">
            <div className="mb-6 sm:mb-8 md:mb-10">
              <FileUpload onUpload={handleVideoUpload} isLoading={isLoading} />
            </div>

            <div className="text-center my-6 sm:my-8">
              <p className="or-separator text-sm sm:text-base md:text-lg">OR</p>
            </div>

            <div className="input-container">
              <SearchBar
                onSubmit={handleVideoURL}
                isLoading={isLoading}
                placeholder="Enter YouTube URL..."
              />
            </div>
          </div>
        ) : (
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-4 sm:gap-6 md:gap-8">
            <div className="lg:col-span-2 space-y-4 sm:space-y-6">
              <div className="bg-bg-card rounded-xl p-3 sm:p-4 md:p-5">
                <h2 className="text-lg sm:text-xl font-bold mb-2 sm:mb-4">{videoData.title}</h2>
                <VideoPlayer
                  videoUrl={videoData.url}
                  subtitles={
                    currentLanguage === 'en'
                      ? videoData.transcript?.segments
                      : videoData.translations?.[currentLanguage]?.transcript
                  }
                />
              </div>

              <div className="bg-bg-card rounded-xl p-3 sm:p-4 md:p-5">
                <div className="flex justify-between items-center mb-3 sm:mb-4">
                  <h3 className="text-base sm:text-lg font-semibold">Summary</h3>
                  <ExportButton
                    data={{
                      title: videoData.title || 'Video Summary',
                      summary:
                        currentLanguage === 'en'
                          ? videoData.summary?.en
                          : videoData.translations?.[currentLanguage]?.summary,
                      transcript:
                        currentLanguage === 'en'
                          ? videoData.transcript?.segments
                          : videoData.translations?.[currentLanguage]?.transcript,
                      language: currentLanguage,
                    }}
                  />
                </div>
                <SummaryDisplay
                  summary={
                    currentLanguage === 'en'
                      ? videoData.summary?.en
                      : videoData.translations?.[currentLanguage]?.summary
                  }
                  language={currentLanguage}
                />
              </div>
            </div>

            <div className="bg-bg-card rounded-xl p-3 sm:p-4 md:p-5 h-min lg:max-h-[calc(100vh-180px)] lg:overflow-y-auto scrollbar-thin">
              <h3 className="text-base sm:text-lg font-semibold mb-3 sm:mb-4">Transcript</h3>
              <SubtitlePanel
                subtitles={
                  currentLanguage === 'en'
                    ? videoData.transcript?.segments
                    : videoData.translations?.[currentLanguage]?.transcript
                }
                onSubtitleClick={(time) => {
                  const videoElement = document.querySelector('video');
                  if (videoElement) {
                    videoElement.currentTime = time;
                    videoElement.play();
                  }
                }}
              />
            </div>
          </div>
        )}
      </main>

      <footer className="fixed bottom-0 left-0 right-0 bg-bg-dark/80 backdrop-blur-sm border-t border-border-color py-2 sm:py-3">
        <div className="container mx-auto px-4 flex items-center justify-between">
          <span className="text-text-light/60 text-xs sm:text-sm">© {new Date().getFullYear()} ClipSummary</span>
          <div className="flex gap-2 sm:gap-4">
            <a href="#" className="text-text-light/60 text-xs sm:text-sm hover:text-text-light transition-colors">
              Terms
            </a>
            <a href="#" className="text-text-light/60 text-xs sm:text-sm hover:text-text-light transition-colors">
              Privacy
            </a>
          </div>
        </div>
      </footer>
    </div>
  );
}

export default App;